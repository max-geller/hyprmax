package config

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// WriteConfig writes the configuration to the specified file
func WriteConfig(config *HyprlandConfig, path string) error {
	if path == "" {
		path = DefaultConfigPath
	}

	// Create backup before writing
	if err := BackupConfig(path); err != nil {
		return fmt.Errorf("failed to create backup: %w", err)
	}

	// Expand home directory
	if strings.HasPrefix(path, "~/") {
		home, err := os.UserHomeDir()
		if err != nil {
			return err
		}
		path = filepath.Join(home, path[2:])
	}

	// Generate config content
	content := generateConfig(config)

	// Write to file
	return os.WriteFile(path, []byte(content), 0644)
}

func generateConfig(config *HyprlandConfig) string {
	var sb strings.Builder

	// Add header
	sb.WriteString("# Generated by hyprmax on " + time.Now().Format("2006-01-02 15:04:05") + "\n\n")

	// Write monitors
	for _, monitor := range config.Monitors {
		sb.WriteString(fmt.Sprintf("monitor=%s,%s,%s\n", 
			monitor.Name, monitor.Resolution, monitor.Position))
	}
	sb.WriteString("\n")

	// Write general section
	sb.WriteString("general {\n")
	sb.WriteString(fmt.Sprintf("    border_size = %d\n", config.General.BorderSize))
	sb.WriteString(fmt.Sprintf("    gaps_in = %d\n", config.General.GapIn))
	sb.WriteString(fmt.Sprintf("    gaps_out = %d\n", config.General.GapOut))
	sb.WriteString(fmt.Sprintf("    cursor_inactive_timeout = %s\n", config.General.Cursor))
	sb.WriteString(fmt.Sprintf("    layout = %s\n", config.General.Layout))
	sb.WriteString(fmt.Sprintf("    no_focus_fallback = %v\n", config.General.NoFocusFollowMouse))
	sb.WriteString("}\n\n")

	// Write decoration section
	sb.WriteString("decoration {\n")
	sb.WriteString(fmt.Sprintf("    rounding = %d\n", config.Decoration.Rounding))
	sb.WriteString(fmt.Sprintf("    blur = %v\n", config.Decoration.BlurEnabled))
	sb.WriteString(fmt.Sprintf("    blur_size = %d\n", config.Decoration.BlurSize))
	sb.WriteString(fmt.Sprintf("    blur_passes = %d\n", config.Decoration.BlurPasses))
	sb.WriteString(fmt.Sprintf("    active_opacity = %.2f\n", config.Decoration.Opacity))
	sb.WriteString(fmt.Sprintf("    inactive_opacity = %.2f\n", config.Decoration.InactiveOpacity))
	sb.WriteString("}\n\n")

	// Write binds
	for _, bind := range config.Binds {
		if bind.Description != "" {
			sb.WriteString(fmt.Sprintf("# %s\n", bind.Description))
		}
		sb.WriteString(fmt.Sprintf("bind%s = %s, %s, %s, %s\n",
			bind.Flags, bind.Mods, bind.Key, bind.Dispatcher, bind.Params))
	}

	return sb.String()
} 